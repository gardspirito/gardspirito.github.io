public:: true
  
В течение длительного времени я работал над Obskurativ — открытой альтернативной Wikidot с большим функционалом. Но из-за отсутствия хоть какой-либо поддержки и осознания, что никому она особо не нужна на фоне множества других проектов (WikiJump, MediaWiki, ...), я делаю шаг назад, чтобы попытаться отточить основы основ и решить проблемы уже существующих систем.
Так рождается идея проекта Dentrado, являющегося последователем Obskurativ. Ниже представлена краткая сводка теоретических изысканий за последние два месяца.
background-color:: yellow
# Что такое Dentrado?
id:: 64f0c83f-8d77-4e1f-afd6-cdaeea27bbe3
	В своей сути это хранилище данных, оперирующее событиями. Под "событием" подразумевается любое действие пользователя, приводящее к изменениям на сайте.
		То есть:
			Создание/редактирование аккаунта пользователя.
			Создание/редактирование страницы.
			Публикация комментариев, оценка статей.
			Изменение настроек сайта.
			... любое иное действие, которое влияет на то, как другие пользователя видят сайт.
		А вот что событиями не является:
		collapsed:: true
			Заход на сайт и навигация по нему.
			Чтение статей.
			Нажатие информационных кнопок, просмотр истории.
	Dentrado хранит произвольные события, и разрабочики сайтов на его базе могут вводить новые методы взаимодействия пользователя и сайта. Например, можно сделать:
		Гостевую книгу, в которые можно помещать произвольные записи.
		Произвольную систему оценки статей.
		Глоссарий, который может пополняться кем угодно.
		Интерактивную статью-загадку, которая автоматически расширяется, если хотя бы один человек введёт правильный пароль.
	... и иные формы интерактивности. Это возможно благодаря тому, что данная система, в отличие от Wikidot/WikiJump/MediaWiki/Fandom, стремится не ограничивать сохраняемые в себе данные. Она может сохранять не только события типа "создана статьи" и "оставлен комментарии", но и любые другие. Пользователи, совершая какое-то действие, просто просят Dentrado сохранить сам факт этого события в памяти.
# Какое это имеет значение?
	Подход Dentrado, при котором система полностью построена на событиях, чрезвычайно прост и делает тривиальными те вещи, для которых в альтернативных системах приходится применять большие усилия. В большинстве своём Dentrado выигрывает в вопросах совместной работы.
	Потенциальные преимущества:
		Интерактивность. Новые инструменты взаимодействия авторов и читателей.
		Свобода экспериментов. Каждый пользователь получает бесконечное пространство для своих экспериментов и может проверить, как они будут выглядеть уже на основном сайте.
			Например, кто-то может захотеть реорганизовать навигацию по сайту, выполнить данную реорганизацию в своём личном пространстве, посоветоваться и показать свои результаты другим людям, а потом применить свои изменения к основному сайту.
		Сохранность данных и полномасштабная архивация. Возможность вернуться в любой момент времени существования проекта, достать из небытия любую утерянную статью или комментарий.
		Перепись истории. Любые нежелательные события в истории проекта и последствия этих действий могут быть запросто стёрты.
			Вандал зашёл на сайт и за несколько часов испоганил пару десятков статей? 1 кнопка, и Dentrado "забудет" про существование вандала, в автоматическом режиме отменяя все сделанные им правки. Найти их можно будет разве что в архиве.
		Организационный, а не контролирующий характер власти.
			В традиционных системах истоник истины един. Например, SCP Foundation — это, в основном, один единственный сайт. Его администраторы получают полный контроль над тем, что является истиной, а потому получают контроль над каноном как таковым. <ins>Любые нововведения и реорганизации, не поддерживаемые администраторами, рубятся на корню</ins> и не могут получить дальнейшие развитие.
			  Это — неизбежное следствие поддержания порядка. Однако Dentrado поддерживает функции копирования и расширения сайтов любых размеров. Это обозначает, что в случае несогласия с "официальной позицией партии" любой человек может продублировать сайт и сделать по-своему. При этом он не теряет связи с оригиналом и может автоматически получать все обновления с оригинального сайта, тем самым поддерживая свою реализацию полностью актуальной.  
			  В такой системе любые администраторы/модераторы имеют контроль исключительно над тем, как организованы данные на подконтрольном им сайте, и если кто-то не поддерживает их позицию, то очень просто создать альтернативные ветки, выполняющих организацию данных по-своему (а, следовательно, самостоятельно устанавливающие, какому контенту место на их версии сайта).  
		Автоматизация.
		collapsed:: true
			Автоматическое добавление сущностей в список при их создании/создание синонимов URL.
			Автоматическое констурирование глоссария.
			Перенос/архивация статей.
			... любые иные однотипные действия, которые требуют вмешательства модераторов. Они могут быть или полностью автоматизированы, или как минимум упрощены до одной операции со стороны модератора.
		Несокрушимость, отказоустойчивость и автономность.
			Федеративность.
			Автономность.
	Потенциальные недостатки:
		Нет гарантий быстрого чтения данных. Dentrado проводит большинство операций только при первом запросе, а потому при высоком объёме необходимой работы может и вовсе застопориться. Методы, позволяющие избежать отказа в этих условиях, ещё должны быть разработаны.
		Dentrado не гарантирует полноту возвращаемых данных. Загруженная статья, например, может не включать в себя последние правки.
		collapsed:: true
			Существует техническое ограничение любых распределённых систем, описываемое [теоремой CAP](https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B5%D0%BC%D0%B0_CAP).
			Согласно этой теореме, любая распределённая система обязана пожертвовать одной из трёх вещей:
				**C**onsistency — корректность и полнота данных.
				**A**vailability — доступность данных из любой точки.
				**P**artition Tolerance — возможность системы функционировать автономно.
			Dentrado следует последним двум принципам, жертвуя первым. Таким образом, система продолжает функционировать в штатном режиме в случае сетевых сбоев и может успешно удовлетворить большинство запросов, но не гарантирует, что пользователь получает наиновейшиую версию событий.
		Dentrado использует язык, который куда более экспрессивный, чем стандартный подход с административной панелью, но может быть проблематичен в изучении.
			Функционал административной панели также может быть реализован, но окончательно она не позволит использовать всю мощь системы.
		Система является Conflict-free. Это обозначает, что любые параллельные модификации приводят к корректному состоянию системы, но нет никаких гарантий, что разрешение возникших конфликтов будет логичным.
			Например, если два пользователя одновременно отредактировали одну и ту же статью двумя противоречащими друг другу образами, то Dentrado попытается их совместить, получая нелогичный результат. Пример:
			collapsed:: true
				Исходная статья: "Привет, мир!"
				Правка 1: "Привет, инопланетяне."
				Правка 2: "Привет всем."
				При применении обеих правок одновременно получится следующая статья:
				  "Привет инопланетяне.всем."  
			Следует осознавать, что вероятность подобных конфликтов довольно низка, и Dentrado может включать в себя систему отслеживания подозрительных мест для ручной коррекции ошибок.
# Концепция разломов
	Сервер Dentrado хранит в себе единый список всех событий, сотворённых всеми пользователями на всех размещённых проектах.
	Разлом — это пространство, сформированное выборочной обработкой этого списка.
	Фактически за всё содержимое разлома отвечает пользовательская 
	  программа, которая называется Cog. В своей сущности Cog является чистой*  
	  функцией, получающей на вход весь список событий и возвращающей   
	  содержимое разлома.  
	Под "чистой" функций подразумевается функция, не способная к взаимодействию с внешним миром. Чистая функция  не может делать запросы к интернету, считывать файлы, писать в консоль и так далее. Чистая функция может только считать и обработать входные 
	  данные и дать ответ.  
	Описание программы производится на специализированном языке Dentrada Fall-from-Grace (Dentrada FFG/DFFG).
	collapsed:: true
		Полностью включает в себя JSON, но расширяет его продвинутыми функциями.
		Демонстрация разлома на DFFG (**не** описывает финальную реализацию языка):
		```dffg
		  # Для нужд демонстрации предположим, что существует некий разлом
		  # с идентификатором 191, который назовём "Основным пространством".
		  # Опишем разлом, являющийся расширением 191, "Песочница".
		  
		  \sourceId ->
		  # ^ Получить уникальный номер текущего разлома, "Песочницы".
		  # Этот список уникален для создаваемого разлома.
		    Breach.over 191 \original ->
		    # ^ Попытаться создать новый разлом на базе уже существующего
		    # разлома под номером 191. Если разлом существует,
		    # он целиком помещается в константу `original`.
		      let overridden = Cog.pre (Events.push (IncludeSource 191 sourceId)) original in
		      # ^ Перепись истории. В глобальную историю добавляется новое событие,
		      # сообщающее, что все события разлома "Песочница" якобы являются частью
		      # "Основного пространства". В константе `overridden` сохраняется Cog,
		      # который описывает всё то же "Основное пространство", но включает в себя
		      # дополнительные события.
		      let titlePrefix = Request.i18nFromMap {
		        en: "Sandbox",
		        ru: "Песочница",
		        eo: "Provejo"
		      }
		      # ^ На разных языках "Песочница" звучит по-разному. Этот код выбирает
		      # нужную строку на основе языковых предпочтений пользотеля.
		      let mapTitle = \article ->
		        article with projectTitle = "${titlePrefix}: ${article.title}"
		      # ^ Вспомогательная функция, которая изменяет наименование проекта,
		      # в рамках которого существует статья, добавляя префкс "Песочница: "
		      # на соответствующем языке.
		      in overridden with articles = ArticleList.map mapTitle overridden.articles
		      # ^ Вернуть Cog `overridden`, предварительно применив mapTitle ко всем статьям.
		```
		  Данный код создаёт "экспериментальную ветку" поверх основного пространства. На ней действуют всё та же система прав и она обновлятся автоматически с обновлением основного пространства. На ней можно спокойно экспериментировать с системой прав, создавать новые статьи, вымещать свою ярость на проект, экспериментировать со стилями, что угодно. Позже эти правки можно включить в изначальный проект.  
		Является вариацией языка [Fall-from-Grace](https://github.com/Gabriella439/grace).
	... однако для большинства ситуация могут быть реализованы шаблоны, которые позволяют пользоваться большинством функций напрямую из интерфейса без необходимости что-то понимать в DFFG.
	## Типичные возможности разломов
		Копирование. Всё содержимое существующего разлома (разлом А) может быть мгновенно скопировано в новое (разлом Б), вне зависимости от размеров. Изменения оригинального разлома не приведут к изменению копии. При этом копия сохраняет систему прав оригинального пространства.
		Расширение. Подобно копированию, однако обновления оригинала приводят и к обновлению копии. Система прав сохраняется.
		Смена владельца. Копия/расширение может сменить главного администратора.
		id:: 64f495f4-a5a3-4e30-a113-729b4afcd620
		Динамическое и статическое включение. Уникальные события из разлома Б могут быть обратно возвращены в разлом А. При этом, как и ранее, разлом А может быть настроен на автоматическое включение всех событий из разлома Б, или же А может включить лишь определённый набор событий.
		Встраивание одного разлома в другой. Статьи из одного разлома могут быть доступны по определённому адресу в другом разлома.
			Замечание: Рекурсия не поддерживается. Если разлом А включает в себя разлом Б, то разлом Б не может включать в себя разлом А.
		Перепись истории. Разлом имеет право видоизменять список событий себя же самого или иного разлома. Это позволяет добавить виртуальные события, которые никогда не существовали, или же исключить неактуальные события.
			Пример: изгнание. Если на сайте появляется человек, приносящий большое количество нестабильности, переписывающий другие статьи и вносящий нежелательные архитектурные изменения, то можно просто исключить факт существования данного индивида из истории сайта. Какой ещё RIAKTOR? Не было никакого RIAKTOR. И Епископов на палочке/сжигания евреев/нацистских комментариев в обсуждениях статей тоже не было. Не существовало, забудьте. Отменяется вообще всё.
			Пример выше, конечно, является радикальным случаем. В более приближённом к реальности смысле перепись истории позволяет синхронизировать различные версии статьи, о чём более подробно будет рассказано в разделе о федеративности.
			Конечно же, необязательно отменять глобальные события. Вполне можно отменить сделанную пару лет назад правку, не трогая всё остальное, или же отменить существование RIAKTOR, но вручную включить некоторые правки обратно.
# Интерактивность и автоматизация
	Как и весь Dentrado, реализация данных концепций полностью зависит от событий.
	Пользователи могут писать Cog, которые обрабатывают произвольные события произвольным образом.
		Например, добавление новой статьи на сайт, являясь событием, может привести в движение пользовательский Cog, составляющий список новых статей на сайте.
	Из-за чистоты Cog, любые нестандартные изменения истории событий (перепись, объединение и т. д.) не должны приводить к поломке любых завязанных на этом механизмов.
		Не окажутся помехой и непредвиденные обстоятельства. Внезапное выключение сервера не нарушит автоматические процессы.
	Существуют инструменты для отправки новых событий в систему. Стоит заметить, что только зарегистрированые пользователи могут отправлять события.
	Сами события могут обозначать любое действие. Например, специально для сайта можно ввести своё событие "оставлена оценка", и реализовать свой алгоритм подсчёта этих оценок.
	Следовательно, "автоматизация" в Dentrado является всеобъемлющей.
	collapsed:: true
		Cog, как уже было подмечено, обладают полной властью над содержимым разлома. Действия же пользователя, напротив, с точки зрения системы не имеют никаких прав, а лишь мжет отправить в систему сообщения, которые могут быть прочитаны и учтены Cog. А могут и не быть учтены.
	Могут существовать пользовательские шаблоны, упрощающие переиспользование частей сайта.
		Например, пользователи могут создать удобный компонент для изображений (привет, Wikidot) и использовать его где угодно на сайте. Возможно, подобные компоненты можно будет встраивать в графический редактор.
	Примеры использования автоматизации:
		Статьи-загадки с единым состоянием для всех.
		Общие словари/глоссарии.
		Система полигона.
		Составление списков.
		Системы голосования, конкурсов.
		Системы защиты от спама.
		Автоматическая генерация страниц (например, странички автора).
		Автоматическая постановка тегов.
# Архивация и сохранность данных
	Так как Dentrado построен на событиях и стремится хранить всё когда-либо случившееся, то вероятность потери данных минимальна, и любое бышее состояние системы может быть воссоздано.
	Стоит заметить, что это справедливо и в условиях переписи истории.
		На самом деле Dentrado имеет два типа переписи истории.
			Виртуальная перепись происходит по запросу разломов и может действовать исключительно на разлом. Виртуальная перепись не изменяет глобальную историю, а потому не мешает полному восстановлению данных.
			Синхронизационная перепись возникает исключительно из-за синхронизации данных между различными узлами Dentrado. Например, если устройство пользователя было длительное время вне сети, а затем вошло сеть, то происходит автоматическая синхронизация, из-за чего уже ранее установленная истина может изменяться.
		Виртуальная, как уже было замечено, не влияет на глобальную историю и позволяет полностью восстановить раннее состояние.
		Синхронизационная приводит к переписи глобальной истории "задним числом", что несколько ограничивает возможности полного восстановления данных, однако синхронизационная перепись может только добавить новые события, ничто не может быть удалено из системы.
	Хоть восстановление любого прошлого состояния проекта является теоретически возможным, это может не быть быстрой операцией. Вероятно, в Dentrado может быть введена система, проводящая автоматическое копирование разлома раз в определённые промежутки времени, чтобы данный процесс можно было ускорить, тем более что операция копирования разлома в Dentrado выполняется мгновенно.
	Dentrado хранит события в логической изоляции от иных данных, что понижает угрозу потери данных. Если база данных даст сбой, существует больше шансов на полное восстановление системы.
		Впрочем, подобная изоляция не является физической, а, следовательно, не несёт особых  гарантий, лишь повышая устойчивость системы в условиях программных сбоев.
# Федеративность и автономность
	## Что это такое?
		Многие современные платформы функционируют на базе одного или нескольких серверов, принадлежащих одному лицу. Отключение этого одного или нескольких серверов по прихоти владельца или технической неполадки приводит к полной остановке функционирования сайта. Кроме того, владелец в таких условиях может навязывать свои условия пользователю.
		  Изначальный релиз Dentrado также подвержен этой уязвимости, однако используемая архитектура может быть относительно просто расширена для поддержки более гибких моделей.  
		Федеративность — это устройство сети, при которой система состоит из множества независимых северов, принадлежащих различным лицам и способных функционировать независимо друг от друга.
	Цель Dentrado — быть полноценной федеративной сетью, способной функционировать в штатном режиме даже при падении центрального узла.
	collapsed:: true
		Или если этот центральный узел, например, психанёт, и... эээ... ну, например, скажет, что представители какой-то страны отныне не имеют право получать доступ к результатам своего же интеллектуального труда из-за каких нибудь там геополитических событий вне их контроля, организованных преступным государством их страны.
		В общем, Dentrado должен оставаться вне политики и продолжать функционировать даже если управляющий им человек вне политики оставаться не хочет.
		~~And even if it falls from grace.~~
	Проблемы синхронизации данных между независимыми узлами Dentrado является относительно тривиальной задачей. Всё, что необходимо — синхронизировать глобальные списки событий.
		Однако в большинстве случаев даже полную синхронизацию списка событий не необходимо выполняться. Примитивные операции могут быть осуществлены и без неё.
	Федеративность подразумевает, что ни один узел не имеет больше прав, чем другой, и каждый узел может функционировать отдельно от всех остальных. Это открывает особые возможности для автономной работы, то есть работы в отдельности от сети.
		Задача Dentrado — предоставлять крайне компактное ядро, которое может быть с простотой запущено любым пользователем в большом количестве контекстов, в том числе в контексте браузера.
		Подобное решение позволит каждому пользователю сайта запустить свой персональный узел Dentrado, который будет являться полнофункциональным и позволит выполнять многие действия без доступа к общей сети.
		В такой системе пользователь может свободно читать редактировать существующие статьи, создавать новые, оставлять комментарии, ставить оценки, то есть делать всё, что и ранее, но уже без необходимости иметь подключение к интернету. Как только оно восстановится, изменения будут автоматически синхронизированы.
# Техническая реализация
	Эту секцию никто не будет читать, так что я отделаюсь одним или несколькими абзацами. Посмотрим. Если кому-то интересно, я могу её расширить.
	Dentrado является функционально-реактивной базой данных. Запись любого нового события в систему практически не приводит к тому, чтобы что-то там шевелилось. Большую часть времени ей индифферентно на то, кто там какую статью опубликовал, какую оценку или комментарий оставил, что там ещё сделал.
		Как уже замечалось, Dentrado на своём низшем уровне является неразумным списком событий, который просто добавляет новое событие в список при его появлении и забирается в кроватку спать дальше.
	Но вот когда шарахает дедлайн, то есть кто-то запрашивает какие-то данные, Dentrado наконец-то поднимается и берётся за работу. Его работа — сделать то, что говорит ему сделать Cog.
	Cog, как уже говорилось, в своей сути является чистой функцией. Однако это небольшая ложь. На самом деле любой Cog является программой, обрабатывающей поступающие данные инкрементально*.
		Грубо говоря, когда кто-то делает правку в статье, Dentrado не несётся пересобирать весь мир с нуля. Вместо этого Dentrado зевает, достаёт из своей памяти информацию о том, какой статья была раньше (пока ещё не было правки), и активизирует Cog, передавая ему это старое состояние статьи (вместе с соответствующим ему старым списком событий) и новый список событий.
		На основе этих данных Cog должен понять, что же изменилось, и обновить статью самым простым способом из возможных.
		Когда Cog заканчивает свою работу, результат его работы сохраняется в памяти для дальнейшего переиспользования.
		Однако для корректной работы системы необходимо, чтобы выполнялся следующий закон: хоть на каждом шаге Cog и предоставляется его старое состояние, ответ Cog, парадоксально, **не** должен от него зависеть.
			Этот закон обозначает, что старое состояние предоставляется Cog исключительно в ознакомительных целях. Чтобы он смог, основываясь на своих старых знаниях, быстро дать ответ, не переделывая уже сделанную им работу.
			Если данный закон выполняется, то Cog можно рассматривать как чистую функцию от одного лишь списка событий. На этом предположении держится Dentrado, минимизируя количество необходимой работы.
			Если данный закон нарушается, то Dentrado не гарантирует корректное функционирование систем. Данные, как было замечено в главе про архивацию, повреждены от такого не будут, но разлом может демонстрировать нестабильное поведение до момента разрешения ошибки. Нарушение закона не несёт угрозы безопасности.
			Dentrado предоставляет по умолчанию набор строительных блоков, которые удовлетворяют данному закону. Комбинирование данных блоков формирует корректные Cog. Настоятельно рекомендуется использовать именно этот подход при создании новых программ, но пользователю предоставляется и возможность создавать новые низкоуровневые Cog, если они уверены в том, что их реализация удовлетворяет закону.
	Dentrado построено на функциональных структурах данных. Это даёт несколько полезных свойств, включая возможность мгновенного копирования существующих данных.
	К сожалению, сами Cog нарушает функциональную чистоту, а потому сложность копирования разлома возрастает пропорционально с возрастанием количества используемых им Cog.
		Однако Dentrado откладывает операцию копирования до того момента, когда она по факту потребуется. Сложная задача разделяется на тысячи мелких, выполняющихся постепенно, а потому можно считать само копирование мгновенным.
